// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean
  sessions      Session[]
  accounts      Account[]
  problems      Problems[]
  submissions Submission[]
  problemSolved ProblemSolved[]

  @@map("user")
}

enum Role {
  ADMIN
  USER
}

enum Defficulty {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  ACCEPTED
  REJECTED
}
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Problems {
  id            String    @id @default(cuid())
  title       String
  description String
  difficulty  Defficulty
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        String[]
  examples    Json
  editorial   String?
  hints       String?
  constraints  String
  testCases   Json
  codeSnippets Json
  referenceSolutions   Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  submissions Submission[]
  problemSolved ProblemSolved[]
}


model Submission {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId   String
  problem     Problems @relation(fields: [problemId], references: [id], onDelete: Cascade)
  sourceCode  Json
  language    String
  stdout      String?
  stderr      String?
  stdin       String?
  compileOutput String?
  time        String?
  memory     String?
  status      SubmissionStatus

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  testCases   TestCaseResult[]
}

model TestCaseResult {
  id          String   @id @default(cuid())
  submissionId String
  submission  Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  testCase    Int
  stdout      String?
  stderr      String?
  stdin       String?
  compileOutput String?
  expected String
  time        String?
  memory     String?
  passed      Boolean
  status      String


  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([submissionId])
}



model ProblemSolved {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId   String
  problem     Problems @relation(fields: [problemId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, problemId])

}